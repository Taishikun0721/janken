exit
step
cpu
user
judge(user, cpu).draw?
cpu
next
user
next
self
next
self
step
user
step
cpu
user
exit
step
user
cpu
next
user
next
cpu
user
step
cpu
user
next
cpu
user
exit
counter
next
singleton.counter <= 3next
singleton.counter <= 3
singleton.counter
limit
exit
limit
singleton.counter
singleton
exit
singleton.increment
singleton
exit
singleton.increment
singleton.counter
singleton
next
cpu
user
result
next
exit
pa_rule
user_hand
exit
user_hand(user)
next
step
cpu.hand_name
user.hand_name
result
exit
cpu_hand.to_sym
cpu_hand.t0_sym
cpu_hand.tp_sym
cpu_hand
conversion_hash
coverson_hash
next
step
result
next
user
step
cpu
user
next
cpu
next
hand
result
next
strategy
strtegy
next
step
next
options[:strategy]
strategy
options
step
next
cpu
cpu.hand.name = 'gu'
cpu
exit
user.handex = 'choki'
user.hand = 'choki'
cpu
user
exit
next
cpu_hand.hand_name
cpu_hand
next
cpu_hand
user_hand
step
exit
judge.user_hand
judge.hand
judge = Judge.new(user, cpu).draw?
Judge.new(user, cpu).draw?
Judge.new(user, cpu)
cpu
cpu.hand.name = 'pa'
cpu
exit
cpu
exit
cpu
exit
cpu
user
exit
cpu
user
exit
cpu
user
exit
next
Judge.new(user, cpu).draw?
user
cpu
next
step
result
next
cpu.hand_name
user.hand_name
step
cpu
user
exit
current_rule
user_hand
cpu_hand
current_rule
exit
current_rule
